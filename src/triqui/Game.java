/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package triqui;

import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ARTHUR-PC
 */
public class Game extends javax.swing.JFrame {

    String movimientosP1 = ""; // Guarda las casillas del jugador 1
    int victoriasP1 = 0; // Lleva el registro de victorias del jgador 1
    String movimientosP2 = ""; // Guarda las casillas del jugador 2
    int victoriasP2 = 0; // Lleva el registro de victorias del jugador 2
    String[][] matriz = new String[3][3]; // Crea una matriz con los numeros de cada posici√≥n (Evita trabajar con indices)
    String jugadorEnTurno = "P1"; // Registra el jugador que tiene el turno en el instante
    int draws = 0; // Lleva el conteo de empates
    int totalTurns = 0; // Lleva el total de turnos para validar que no hubo victorias.

    /**
     * Creates new form Game
     */
    public Game() {
        initComponents();
        this.setTitle("Triqui - Arthur Developer");
        this.setLocationRelativeTo(this); // Centra la ventana del juego
        ind_p1.setVisible(false); // Oculta el indice de turno del jugador 1
        ind_p2.setVisible(false); // Oculta el indice de turno de jugador 2
        llenarMatriz();
        tableGame.setDefaultRenderer(Object.class, new ImgTable()); // Asigna el nuevo metodo de renderizado por defecto
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tableGame = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lbl_Draws = new javax.swing.JLabel();
        lbl_WinP2 = new javax.swing.JLabel();
        ind_p1 = new javax.swing.JLabel();
        ind_p2 = new javax.swing.JLabel();
        lbl_WinP1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        fondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tableGame.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Title 2", "Title 3"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableGame.setColumnSelectionAllowed(true);
        tableGame.setTableHeader(null);
        tableGame.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableGameMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableGame);
        tableGame.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tableGame.getColumnModel().getColumnCount() > 0) {
            tableGame.getColumnModel().getColumn(0).setResizable(false);
            tableGame.getColumnModel().getColumn(1).setResizable(false);
            tableGame.getColumnModel().getColumn(2).setResizable(false);
        }

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 180, 240, 210));

        jLabel1.setFont(new java.awt.Font("Bradley Hand ITC", 1, 24)); // NOI18N
        jLabel1.setText("Player 2");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 360, -1, -1));

        jButton1.setBackground(new java.awt.Color(51, 153, 0));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("PLAY!");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 440, 230, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/ic_user.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 230, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/ic_user.png"))); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, -1, -1));

        lbl_Draws.setFont(new java.awt.Font("Bradley Hand ITC", 1, 24)); // NOI18N
        lbl_Draws.setForeground(new java.awt.Color(255, 255, 255));
        lbl_Draws.setText("Draws: 0");
        getContentPane().add(lbl_Draws, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 150, 120, -1));

        lbl_WinP2.setFont(new java.awt.Font("Bradley Hand ITC", 1, 48)); // NOI18N
        lbl_WinP2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_WinP2.setText("0");
        lbl_WinP2.setFocusable(false);
        lbl_WinP2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lbl_WinP2, new org.netbeans.lib.awtextra.AbsoluteConstraints(487, 400, 80, -1));

        ind_p1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/ic_down.png"))); // NOI18N
        getContentPane().add(ind_p1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 150, -1, -1));

        ind_p2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/ic_down.png"))); // NOI18N
        getContentPane().add(ind_p2, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 150, -1, -1));

        lbl_WinP1.setFont(new java.awt.Font("Bradley Hand ITC", 1, 48)); // NOI18N
        lbl_WinP1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_WinP1.setText("0");
        lbl_WinP1.setToolTipText("");
        lbl_WinP1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lbl_WinP1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 400, 90, -1));

        jLabel8.setFont(new java.awt.Font("Bradley Hand ITC", 1, 24)); // NOI18N
        jLabel8.setText("Player 1");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 360, -1, -1));

        jLabel5.setFont(new java.awt.Font("Bradley Hand ITC", 1, 60)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Triqui Game");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, -1, -1));

        fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/back2.jpg"))); // NOI18N
        getContentPane().add(fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 500));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        llenarTabla();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tableGameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableGameMouseClicked
        // TODO add your handling code here:
        jugar();
    }//GEN-LAST:event_tableGameMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Game().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel fondo;
    private javax.swing.JLabel ind_p1;
    private javax.swing.JLabel ind_p2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl_Draws;
    private javax.swing.JLabel lbl_WinP1;
    private javax.swing.JLabel lbl_WinP2;
    private javax.swing.JTable tableGame;
    // End of variables declaration//GEN-END:variables

//  MIS METODOS -------------------------------------------------------------------------------------------------------
    public void llenarTabla() { // Llena la tabla para empezar el juego 
        DefaultTableModel modelo = (DefaultTableModel) tableGame.getModel();
        modelo.setNumRows(0); // Borra todas las filas de la tabla
        ImageIcon x = new ImageIcon("src/Images/ic_less.png");
        tableGame.setRowHeight(68); // Aumenta la altura de las columnas
        for (int i = 0; i < 3; i++) {
            modelo.addRow(new Object[]{new JLabel(x), new JLabel(x), new JLabel(x)});
        }
        reiniciar();
    }

    public void llenarMatriz() {
        int dato = 1;
        for (int filas = 0; filas < 3; filas++) {
            for (int col = 0; col < 3; col++) {
                matriz[filas][col] = dato + "";
                dato++;
            }
        }
    }

    public void recorrerMatriz() { //Sin Uso 
        String datos = "";
        for (int filas = 0; filas < 3; filas++) {
            for (int col = 0; col < 3; col++) {
                datos += matriz[filas][col] + " ";
            }
            datos += "\n";
        }
        System.out.println(datos);
    }

    public void cambiarImagen(int row, int col) {
        ImageIcon image;
        if (jugadorEnTurno.equals("P1")) {
            image = new ImageIcon("src/Images/ic_equis.png");
        } else {
            image = new ImageIcon("src/Images/ic_circle.png");
        }
        System.out.println("Debi√≥ cambiar");
        tableGame.setValueAt(new JLabel(image), row, col);
    }

    public void jugar() {
        if (jugadorEnTurno.equals("P1")) {
            if (!verificarCasilla(matriz[tableGame.getSelectedRow()][tableGame.getSelectedColumn()], movimientosP2)
                    && !verificarCasilla(matriz[tableGame.getSelectedRow()][tableGame.getSelectedColumn()], movimientosP1)) { // Valida que la casilla seleccionada no haya sido
                //seleccionada anteriormente por el o por su oponente.

                movimientosP1 += retornarCasilla(tableGame.getSelectedRow(), tableGame.getSelectedColumn()); // Agrega el movimiento (Casilla) a los movimientos del jugador.
                cambiarImagen(tableGame.getSelectedRow(), tableGame.getSelectedColumn());
                if (verificarVictoria(movimientosP1)) {
                    llenarTabla();
                    victoriasP1++;
                    lbl_WinP1.setText(victoriasP1 + "");
                } else {
                    totalTurns++;
                    if (totalTurns == 9) {
                        draws++;
                        lbl_Draws.setText("Draws: " + String.valueOf(draws));
                        JOptionPane.showMessageDialog(null, "Draw.", "Any win", JOptionPane.NO_OPTION);
                        llenarTabla();
                    } else {
                        System.out.println("Movimientos de " + jugadorEnTurno + ": " + movimientosP1);
                        ind_p1.setVisible(false);
                        jugadorEnTurno = "P2";
                        ind_p2.setVisible(true);
                    }

                }

            } else {
                JOptionPane.showMessageDialog(null, "This space isn¬¥t avaiable.", "No Avaiable", JOptionPane.INFORMATION_MESSAGE);
            }

        } else if (jugadorEnTurno.equals("P2")) {

            if (!verificarCasilla(matriz[tableGame.getSelectedRow()][tableGame.getSelectedColumn()], movimientosP1)
                    && !verificarCasilla(matriz[tableGame.getSelectedRow()][tableGame.getSelectedColumn()], movimientosP2)) {

                movimientosP2 += retornarCasilla(tableGame.getSelectedRow(), tableGame.getSelectedColumn());
                cambiarImagen(tableGame.getSelectedRow(), tableGame.getSelectedColumn());
                if (verificarVictoria(movimientosP2)) {
                    llenarTabla();
                    victoriasP2++;
                    lbl_WinP2.setText(victoriasP2 + "");
                } else {
                    totalTurns++;
                    if (totalTurns == 9) {
                        draws++;
                        lbl_Draws.setText("Draws: " + String.valueOf(draws));
                        JOptionPane.showMessageDialog(null, "Draw.", "Any win", JOptionPane.NO_OPTION);
                        llenarTabla();
                    } else {
                        System.out.println("Movimientos de " + jugadorEnTurno + ": " + movimientosP2);
                        ind_p2.setVisible(false);
                        jugadorEnTurno = "P1";
                        ind_p1.setVisible(true);
                    }

                }

            } else {
                JOptionPane.showMessageDialog(null, "This space isn¬¥t avaiable.", "No Avaiable", JOptionPane.INFORMATION_MESSAGE);
            }

        }
    }

    public boolean verificarCasilla(String numCasilla, String movJugador) {

        char[] movimientos = movJugador.toCharArray();
        for (int i = 0; i < movimientos.length; i++) {
            if (String.valueOf(movimientos[i]).equals(numCasilla)) {
                return true;
            }
        }

        return false;
    }

    public String retornarCasilla(int fil, int col) {
        return String.valueOf(matriz[fil][col]);
    }

    public boolean verificarVictoria(String movimiento) {
        if (verificarCasilla("1", movimiento) && verificarCasilla("2", movimiento) && verificarCasilla("3", movimiento)) { // Horizontal 1
            JOptionPane.showMessageDialog(null, jugadorEnTurno + " win with a horizontal triqui.");
            return true;
        } else if (verificarCasilla("4", movimiento) && verificarCasilla("5", movimiento) && verificarCasilla("6", movimiento)) { // Horizontal 2
            JOptionPane.showMessageDialog(null, jugadorEnTurno + " win with a horizontal triqui.");
            return true;
        } else if (verificarCasilla("7", movimiento) && verificarCasilla("8", movimiento) && verificarCasilla("9", movimiento)) { // Horizontal 3
            JOptionPane.showMessageDialog(null, jugadorEnTurno + " win with a horizontal triqui.");
            return true;
        } else if (verificarCasilla("7", movimiento) && verificarCasilla("5", movimiento) && verificarCasilla("3", movimiento)) { // Diagonal 1
            JOptionPane.showMessageDialog(null, jugadorEnTurno + " win with a diagonal triqui.");
            return true;
        } else if (verificarCasilla("1", movimiento) && verificarCasilla("5", movimiento) && verificarCasilla("9", movimiento)) { // Diagonal 2
            JOptionPane.showMessageDialog(null, jugadorEnTurno + " win with a diagonal triqui.");
            return true;
        } else if (verificarCasilla("1", movimiento) && verificarCasilla("4", movimiento) && verificarCasilla("7", movimiento)) { // Vertical 1
            JOptionPane.showMessageDialog(null, jugadorEnTurno + " win with a vertical triqui.");
            return true;
        } else if (verificarCasilla("3", movimiento) && verificarCasilla("6", movimiento) && verificarCasilla("9", movimiento)) { // Vertical 2
            JOptionPane.showMessageDialog(null, jugadorEnTurno + " win with a vertical triqui.");
            return true;
        } else if (verificarCasilla("2", movimiento) && verificarCasilla("5", movimiento) && verificarCasilla("8", movimiento)) { // Vertical 3
            JOptionPane.showMessageDialog(null, jugadorEnTurno + " win with a vertical triqui.");
            return true;
        }
        return false;

    }

    public void reiniciar() {
        ind_p1.setVisible(true); // Muestra el label a Player 1
        ind_p2.setVisible(false); // Oculta el label a Player 2
        movimientosP1 = ""; // Reinicia los movimientos de Player 1
        movimientosP2 = ""; // Reinicia los movimientos de Player 2
        jugadorEnTurno = "P1"; // Otorga el turno nuevamente a Player 1
        totalTurns=0; // Reinicia los turnos realizados
    }

}
